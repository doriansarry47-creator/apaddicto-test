#!/usr/bin/env node

/**
 * Script de diagnostic et correction du syst√®me de strat√©gies anti-craving
 * Ce script v√©rifie et corrige les probl√®mes potentiels avec la sauvegarde des strat√©gies
 */

console.log('üîß DIAGNOSTIC DES STRAT√âGIES ANTI-CRAVING');
console.log('=========================================');

// 1. V√©rification du sch√©ma de donn√©es
console.log('\nüìã 1. V√©rification du sch√©ma de la base de donn√©es...');

const fs = require('fs');
const path = require('path');

// V√©rifier le sch√©ma des strat√©gies dans shared/schema.ts
const schemaPath = path.join(__dirname, 'shared/schema.ts');
if (!fs.existsSync(schemaPath)) {
    console.error('‚ùå Fichier schema.ts introuvable');
    process.exit(1);
}

const schemaContent = fs.readFileSync(schemaPath, 'utf8');

// V√©rifier que la table antiCravingStrategies est bien d√©finie
if (!schemaContent.includes('antiCravingStrategies')) {
    console.error('‚ùå Table antiCravingStrategies non trouv√©e dans le sch√©ma');
    process.exit(1);
}

console.log('‚úÖ Table antiCravingStrategies trouv√©e dans le sch√©ma');

// 2. V√©rification de l'API backend
console.log('\nüîå 2. V√©rification des routes API...');

const routesPath = path.join(__dirname, 'server/routes.ts');
if (!fs.existsSync(routesPath)) {
    console.error('‚ùå Fichier routes.ts introuvable');
    process.exit(1);
}

const routesContent = fs.readFileSync(routesPath, 'utf8');

// V√©rifier les routes strategies
if (!routesContent.includes('/api/strategies') || !routesContent.includes('POST')) {
    console.error('‚ùå Route POST /api/strategies non trouv√©e');
    process.exit(1);
}

console.log('‚úÖ Routes API strategies trouv√©es');

// 3. V√©rification du composant client
console.log('\n‚öõÔ∏è  3. V√©rification du composant StrategiesBox...');

const strategiesBoxPath = path.join(__dirname, 'client/src/components/strategies-box.tsx');
if (!fs.existsSync(strategiesBoxPath)) {
    console.error('‚ùå Composant strategies-box.tsx introuvable');
    process.exit(1);
}

const strategiesBoxContent = fs.readFileSync(strategiesBoxPath, 'utf8');

// V√©rifier la mutation de sauvegarde
if (!strategiesBoxContent.includes('saveStrategiesMutation') || !strategiesBoxContent.includes('mutationFn')) {
    console.error('‚ùå Mutation de sauvegarde non trouv√©e dans StrategiesBox');
    process.exit(1);
}

console.log('‚úÖ Composant StrategiesBox trouv√© et configur√©');

// 4. V√©rification de l'int√©gration dans le dashboard
console.log('\nüè† 4. V√©rification de l\'int√©gration dans le dashboard...');

const dashboardPath = path.join(__dirname, 'client/src/pages/dashboard.tsx');
if (!fs.existsSync(dashboardPath)) {
    console.error('‚ùå Dashboard non trouv√©');
    process.exit(1);
}

const dashboardContent = fs.readFileSync(dashboardPath, 'utf8');

if (!dashboardContent.includes('StrategiesBox') || !dashboardContent.includes('showStrategiesBox')) {
    console.error('‚ùå StrategiesBox non int√©gr√© dans le dashboard');
    process.exit(1);
}

console.log('‚úÖ StrategiesBox bien int√©gr√© dans le dashboard');

// 5. V√©rification de l'affichage dans le tracking
console.log('\nüìä 5. V√©rification de l\'affichage dans le tracking...');

const trackingPath = path.join(__dirname, 'client/src/pages/tracking.tsx');
if (!fs.existsSync(trackingPath)) {
    console.error('‚ùå Page tracking non trouv√©e');
    process.exit(1);
}

const trackingContent = fs.readFileSync(trackingPath, 'utf8');

if (!trackingContent.includes('antiCravingStrategies') || !trackingContent.includes('/api/strategies')) {
    console.error('‚ùå Strat√©gies non affich√©es dans le tracking');
    process.exit(1);
}

console.log('‚úÖ Strat√©gies bien affich√©es dans l\'onglet tracking');

console.log('\nüîç DIAGNOSTIC TERMIN√â - TOUS LES COMPOSANTS SONT PR√âSENTS');
console.log('\nüõ†Ô∏è  CORRECTIONS POTENTIELLES √Ä APPLIQUER...');
