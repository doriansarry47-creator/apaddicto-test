#!/usr/bin/env node

// Script de test pour valider le d√©ploiement local avant Vercel
const http = require('http');
const https = require('https');
const path = require('path');
const fs = require('fs');

console.log('üß™ Test de Validation du D√©ploiement Apaddicto\n');

// Test 1: V√©rification des fichiers de build
console.log('1Ô∏è‚É£ V√©rification des fichiers de build...');

const distPath = path.join(__dirname, 'dist');
const apiPath = path.join(__dirname, 'api', 'index.ts');

try {
  // V√©rifier dist/index.html
  const indexExists = fs.existsSync(path.join(distPath, 'index.html'));
  console.log(`   ‚úÖ dist/index.html: ${indexExists ? 'Pr√©sent' : '‚ùå MANQUANT'}`);
  
  // V√©rifier assets
  const assetsExists = fs.existsSync(path.join(distPath, 'assets'));
  console.log(`   ‚úÖ dist/assets/: ${assetsExists ? 'Pr√©sent' : '‚ùå MANQUANT'}`);
  
  // V√©rifier API
  const apiExists = fs.existsSync(apiPath);
  console.log(`   ‚úÖ api/index.ts: ${apiExists ? 'Pr√©sent' : '‚ùå MANQUANT'}`);
  
  if (indexExists && assetsExists && apiExists) {
    console.log('   ‚úÖ Structure de build: VALIDE\n');
  } else {
    console.log('   ‚ùå Structure de build: INVALIDE - Ex√©cuter npm run build\n');
    process.exit(1);
  }
} catch (error) {
  console.error('   ‚ùå Erreur lors de la v√©rification:', error.message);
  process.exit(1);
}

// Test 2: V√©rification de la configuration Vercel
console.log('2Ô∏è‚É£ V√©rification de la configuration Vercel...');

try {
  const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
  
  const hasCorrectDistDir = vercelConfig.builds?.[0]?.config?.distDir === 'dist';
  console.log(`   ‚úÖ distDir: ${hasCorrectDistDir ? 'Correct (dist)' : '‚ùå Incorrect'}`);
  
  const hasApiRoute = vercelConfig.routes?.some(route => route.src?.includes('/api/'));
  console.log(`   ‚úÖ Route API: ${hasApiRoute ? 'Configur√©e' : '‚ùå Manquante'}`);
  
  const hasStaticRoute = vercelConfig.routes?.some(route => route.dest === '/index.html');
  console.log(`   ‚úÖ Route statique: ${hasStaticRoute ? 'Configur√©e' : '‚ùå Manquante'}`);
  
  if (hasCorrectDistDir && hasApiRoute && hasStaticRoute) {
    console.log('   ‚úÖ Configuration Vercel: VALIDE\n');
  } else {
    console.log('   ‚ùå Configuration Vercel: INVALIDE\n');
  }
} catch (error) {
  console.error('   ‚ùå Erreur lors de la lecture de vercel.json:', error.message);
}

// Test 3: V√©rification du contenu HTML
console.log('3Ô∏è‚É£ V√©rification du contenu HTML...');

try {
  const indexContent = fs.readFileSync(path.join(distPath, 'index.html'), 'utf8');
  
  const hasTitle = indexContent.includes('Apaddicto') || indexContent.includes('<title>');
  console.log(`   ‚úÖ Titre pr√©sent: ${hasTitle ? 'Oui' : '‚ùå Non'}`);
  
  const hasAssets = indexContent.includes('/assets/') || indexContent.includes('index-');
  console.log(`   ‚úÖ R√©f√©rences assets: ${hasAssets ? 'Pr√©sentes' : '‚ùå Manquantes'}`);
  
  const hasReactRoot = indexContent.includes('root') || indexContent.includes('id="');
  console.log(`   ‚úÖ Root React: ${hasReactRoot ? 'Configur√©' : '‚ùå Manquant'}`);
  
  console.log('   ‚úÖ Contenu HTML: VALIDE\n');
} catch (error) {
  console.error('   ‚ùå Erreur lors de la lecture de l\'HTML:', error.message);
}

// Test 4: V√©rification des variables d'environnement
console.log('4Ô∏è‚É£ V√©rification des variables d\'environnement...');

try {
  // V√©rifier .env.production
  if (fs.existsSync('.env.production')) {
    const envContent = fs.readFileSync('.env.production', 'utf8');
    
    const hasDbUrl = envContent.includes('DATABASE_URL');
    console.log(`   ‚úÖ DATABASE_URL: ${hasDbUrl ? 'D√©finie' : '‚ùå Manquante'}`);
    
    const hasSecret = envContent.includes('SESSION_SECRET');
    console.log(`   ‚úÖ SESSION_SECRET: ${hasSecret ? 'D√©finie' : '‚ùå Manquante'}`);
    
    const hasNodeEnv = envContent.includes('NODE_ENV=production');
    console.log(`   ‚úÖ NODE_ENV: ${hasNodeEnv ? 'Production' : '‚ùå Non d√©fini'}`);
  }
  
  console.log('   ‚ÑπÔ∏è NOTE: Ces variables doivent √™tre configur√©es dans le dashboard Vercel\n');
} catch (error) {
  console.error('   ‚ùå Erreur lors de la lecture des variables:', error.message);
}

// Test 5: Suggestions d'URLs Vercel probables
console.log('5Ô∏è‚É£ URLs de d√©ploiement Vercel probables:');
console.log('   üîó https://apaddcito-4.vercel.app/');
console.log('   üîó https://apaddcito-4-doriansarry47-creator.vercel.app/');
console.log('   üîó https://apaddcito-4-git-main-doriansarry47-creator.vercel.app/');
console.log();

// Test 6: Checklist de validation post-d√©ploiement
console.log('6Ô∏è‚É£ Checklist de validation post-d√©ploiement:');
console.log('   ‚ñ° Page d\'accueil se charge (/)');
console.log('   ‚ñ° API Health check fonctionne (/api/health)');
console.log('   ‚ñ° Inscription patient fonctionne (/login)');
console.log('   ‚ñ° Connexion patient fonctionne');
console.log('   ‚ñ° Redirection vers dashboard (/) apr√®s login');
console.log('   ‚ñ° Dashboard affiche toutes les cartes');
console.log('   ‚ñ° Fonctionnalit√©s interactives (craving, beck)');
console.log('   ‚ñ° Navigation entre pages');
console.log('   ‚ñ° Responsive design mobile/desktop');
console.log();

console.log('‚ú® Validation locale termin√©e!');
console.log('üìã Consultez VERCEL_TEST_INSTRUCTIONS.md pour les tests d√©taill√©s');
console.log('üöÄ Votre application est pr√™te pour les utilisateurs une fois d√©ploy√©e!');