#!/usr/bin/env node

const https = require('https');
const http = require('http');

class VercelTester {
  constructor(baseUrl) {
    this.baseUrl = baseUrl.replace(/\/$/, ''); // Remove trailing slash
    this.cookies = [];
  }

  async makeRequest(method, path, data = null) {
    return new Promise((resolve, reject) => {
      const url = new URL(path, this.baseUrl);
      const isHttps = url.protocol === 'https:';
      
      const options = {
        hostname: url.hostname,
        port: url.port || (isHttps ? 443 : 80),
        path: url.pathname + url.search,
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Cookie': this.cookies.join('; '),
          'User-Agent': 'Apaddicto-Test/1.0'
        }
      };

      if (data) {
        const jsonData = JSON.stringify(data);
        options.headers['Content-Length'] = Buffer.byteLength(jsonData);
      }

      const client = isHttps ? https : http;
      const req = client.request(options, (res) => {
        // Capturer les cookies
        if (res.headers['set-cookie']) {
          res.headers['set-cookie'].forEach(cookie => {
            const cookieParts = cookie.split(';')[0];
            const cookieName = cookieParts.split('=')[0];
            
            // Remplacer ou ajouter cookie
            const existingIndex = this.cookies.findIndex(c => c.split('=')[0] === cookieName);
            if (existingIndex >= 0) {
              this.cookies[existingIndex] = cookieParts;
            } else {
              this.cookies.push(cookieParts);
            }
          });
        }

        let body = '';
        res.on('data', (chunk) => body += chunk);
        res.on('end', () => {
          try {
            const jsonBody = body ? JSON.parse(body) : {};
            resolve({
              status: res.statusCode,
              headers: res.headers,
              body: jsonBody,
              rawBody: body
            });
          } catch (e) {
            resolve({
              status: res.statusCode,
              headers: res.headers,
              body: {},
              rawBody: body
            });
          }
        });
      });

      req.on('error', reject);

      if (data) {
        req.write(JSON.stringify(data));
      }

      req.end();
    });
  }

  async testProductionAuth() {
    console.log(`üöÄ Test de l'authentification sur Vercel: ${this.baseUrl}\n`);

    // 1. Test de la page d'accueil (devrait rediriger vers login)
    console.log('1Ô∏è‚É£ Test page d\'accueil...');
    try {
      const homeResponse = await this.makeRequest('GET', '/');
      console.log(`   Status: ${homeResponse.status}`);
      
      if (homeResponse.status === 200 && homeResponse.rawBody.includes('login')) {
        console.log('   ‚úÖ Redirection vers login fonctionne');
      } else {
        console.log('   ‚ö†Ô∏è R√©ponse inattendue pour la page d\'accueil');
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur: ${error.message}`);
    }

    console.log('');

    // 2. Test API de sant√©
    console.log('2Ô∏è‚É£ Test API de sant√©...');
    try {
      const healthResponse = await this.makeRequest('GET', '/api/health');
      console.log(`   Status: ${healthResponse.status}`);
      
      if (healthResponse.status === 200) {
        console.log('   ‚úÖ API fonctionnelle');
      } else {
        console.log('   ‚ùå API non disponible');
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur API: ${error.message}`);
    }

    console.log('');

    // 3. Test inscription
    console.log('3Ô∏è‚É£ Test inscription...');
    const testUser = {
      email: `vercel.test.${Date.now()}@example.com`,
      password: 'TestPassword123!',
      firstName: 'Vercel',
      lastName: 'Tester',
      role: 'patient'
    };

    try {
      const registerResponse = await this.makeRequest('POST', '/api/auth/register', testUser);
      console.log(`   Status: ${registerResponse.status}`);
      
      if (registerResponse.status === 200 && registerResponse.body.user) {
        console.log(`   ‚úÖ Inscription r√©ussie: ${registerResponse.body.user.email}`);
      } else {
        console.log(`   ‚ùå Inscription √©chou√©e: ${JSON.stringify(registerResponse.body)}`);
        return false;
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur inscription: ${error.message}`);
      return false;
    }

    console.log('');

    // 4. Test v√©rification authentification
    console.log('4Ô∏è‚É£ Test v√©rification authentification...');
    try {
      const authResponse = await this.makeRequest('GET', '/api/auth/me');
      console.log(`   Status: ${authResponse.status}`);
      
      if (authResponse.status === 200 && authResponse.body.user) {
        console.log(`   ‚úÖ Utilisateur authentifi√©: ${authResponse.body.user.email}`);
      } else {
        console.log(`   ‚ùå Probl√®me authentification: ${JSON.stringify(authResponse.body)}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur v√©rification: ${error.message}`);
    }

    console.log('');

    // 5. Test endpoints prot√©g√©s
    console.log('5Ô∏è‚É£ Test endpoints prot√©g√©s...');
    const endpoints = ['/api/exercises', '/api/cravings/stats'];
    let allEndpointsWork = true;

    for (const endpoint of endpoints) {
      try {
        const response = await this.makeRequest('GET', endpoint);
        if (response.status === 200) {
          console.log(`   ‚úÖ ${endpoint}: OK`);
        } else {
          console.log(`   ‚ùå ${endpoint}: Status ${response.status}`);
          allEndpointsWork = false;
        }
      } catch (error) {
        console.log(`   ‚ùå ${endpoint}: Erreur ${error.message}`);
        allEndpointsWork = false;
      }
    }

    console.log('');

    // 6. Test d√©connexion
    console.log('6Ô∏è‚É£ Test d√©connexion...');
    try {
      const logoutResponse = await this.makeRequest('POST', '/api/auth/logout');
      console.log(`   Status logout: ${logoutResponse.status}`);
      
      if (logoutResponse.status === 200) {
        // V√©rifier que l'utilisateur est bien d√©connect√©
        const authCheckResponse = await this.makeRequest('GET', '/api/auth/me');
        if (authCheckResponse.status === 401) {
          console.log('   ‚úÖ D√©connexion compl√®te r√©ussie');
        } else {
          console.log('   ‚ùå Utilisateur toujours connect√© apr√®s d√©connexion');
          allEndpointsWork = false;
        }
      } else {
        console.log('   ‚ùå √âchec d√©connexion');
        allEndpointsWork = false;
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur d√©connexion: ${error.message}`);
      allEndpointsWork = false;
    }

    console.log('');
    console.log('=' * 60);
    console.log('üìä R√âSULTATS FINAUX');
    console.log('=' * 60);

    if (allEndpointsWork) {
      console.log('üéâ SUCC√àS COMPLET! L\'application Vercel fonctionne parfaitement.');
      console.log('‚úÖ Inscription, connexion, authentification et d√©connexion OK');
      console.log('‚úÖ Tous les endpoints prot√©g√©s sont accessibles');
      console.log('');
      console.log('üåê L\'application est pr√™te pour les utilisateurs!');
      return true;
    } else {
      console.log('‚ùå Des probl√®mes ont √©t√© d√©tect√©s sur l\'environnement Vercel');
      return false;
    }
  }
}

// Fonction principale
async function main() {
  const vercelUrl = process.argv[2];
  
  if (!vercelUrl) {
    console.log('‚ùå Usage: node test-vercel-production.cjs <VERCEL_URL>');
    console.log('   Exemple: node test-vercel-production.cjs https://apaddicto-test.vercel.app');
    process.exit(1);
  }

  const tester = new VercelTester(vercelUrl);
  
  try {
    const success = await tester.testProductionAuth();
    process.exit(success ? 0 : 1);
  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { VercelTester };